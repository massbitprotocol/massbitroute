location /_internal_api/v1 {
    access_log _SITE_ROOT_/logs/internal_api_v1-access.log;
    error_log _SITE_ROOT_/logs/internal_api_v1-error.log;
    __ENV_WHITELIST_PARTNERS__ include _SITE_ROOT_/cors.conf;
    set $app_root _APP_ROOT_;
    default_type application/json;
    limit_except OPTIONS POST GET {
        deny all;
    }
    content_by_lua 'nginxBootstrap:runapp("_APP_ROOT_")';
}
location /_internal_api/v2 {
    access_log _SITE_ROOT_/logs/internal_api_v2-access.log;
    error_log _SITE_ROOT_/logs/internal_api_v2-error.log;
    __ENV_WHITELIST_PARTNERS__ include _SITE_ROOT_/cors.conf;
    set $app_root _APP_ROOT_;
    default_type application/json;
    limit_except OPTIONS POST GET {
        deny all;
    }
    content_by_lua 'nginxBootstrap:runapp("_APP_ROOT_")';
}
location /api/v1 {
    set_decode_base32 $session $http_mbrid;
    set_decrypt_session $raw $session;
    if ($arg_action = user.registerconfirm) {
        set $raw bypass;
    }
    if ($arg_action = user.registermassbitdotnotofficial) {
        set $raw bypass;
    }
    if ($arg_action = user.get) {
        set $raw bypass;
    }
    if ($arg_action = node.register) {
        set $raw bypass;
    }
    if ($arg_action = node.unregister) {
        set $raw bypass;
    }
    if ($arg_action = node.ping) {
        set $raw bypass;
    }
    if ($arg_action = node.nodeverify) {
        set $raw bypass;
    }
    if ($arg_action = gateway.ping) {
        set $raw bypass;
    }
    if ($arg_action = gateway.nodeverify) {
        set $raw bypass;
    }
    if ($arg_action = gateway.register) {
        set $raw bypass;
    }
    if ($arg_action = gateway.unregister) {
        set $raw bypass;
    }
    if ($arg_action = stat.overview) {
        set $raw bypass;
    }
    if ($arg_action = stat.network) {
        set $raw bypass;
    }
    if ($arg_action = stat.dapi) {
        set $raw bypass;
    }
    if ($arg_action = node.adminupdate) {
        return 200 '{"result":false, "err_code": 100}';
    }
    if ($arg_action = node.calljob) {
        return 200 '{"result":false, "err_code": 100}';
    }
    if ($arg_action = gateway.adminupdate) {
        return 200 '{"result":false, "err_code": 100}';
    }
    if ($arg_action = gateway.calljob) {
        return 200 '{"result":false, "err_code": 100}';
    }
    if ($raw = '') {
        return 200 '{"result":false, "err_code": 100}';
    }
    include _SITE_ROOT_/cors.conf;
    set $app_root _APP_ROOT_;
    default_type application/json;
    limit_except OPTIONS POST GET {
        deny all;
    }
    content_by_lua 'nginxBootstrap:runapp("_APP_ROOT_")';
}
location /api/node/check {
    content_by_lua_file _SITE_ROOT_/src/node_check.lua;
}
location /api/v1/gateway_install {
    set $template_root _APP_ROOT_/templates;
    content_by_lua_file _APP_ROOT_/handlers/gateway_install.lua;
}
location /api/v1/node_install {
    set $template_root _APP_ROOT_/templates;
    content_by_lua_file _APP_ROOT_/handlers/node_install.lua;
}
# ngx_link_func_lib _APP_ROOT_/functions/target/debug/liblibrustfunction.so;
# location = /testCFunGreeting {
#     ngx_link_func_call my_app_simple_get_greeting;
# }
