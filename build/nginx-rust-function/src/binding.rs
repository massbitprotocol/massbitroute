/* automatically generated by rust-bindgen */

pub const _FEATURES_H : u32 = 1 ;

 pub const _DEFAULT_SOURCE : u32 = 1 ;

 pub const __USE_ISOC11 : u32 = 1 ;

 pub const __USE_ISOC99 : u32 = 1 ;

 pub const __USE_ISOC95 : u32 = 1 ;

 pub const __USE_POSIX_IMPLICITLY : u32 = 1 ;

 pub const _POSIX_SOURCE : u32 = 1 ;

 pub const _POSIX_C_SOURCE : u32 = 200809 ;

 pub const __USE_POSIX : u32 = 1 ;

 pub const __USE_POSIX2 : u32 = 1 ;

 pub const __USE_POSIX199309 : u32 = 1 ;

 pub const __USE_POSIX199506 : u32 = 1 ;

 pub const __USE_XOPEN2K : u32 = 1 ;

 pub const __USE_XOPEN2K8 : u32 = 1 ;

 pub const _ATFILE_SOURCE : u32 = 1 ;

 pub const __USE_MISC : u32 = 1 ;

 pub const __USE_ATFILE : u32 = 1 ;

 pub const __USE_FORTIFY_LEVEL : u32 = 0 ;

 pub const _STDC_PREDEF_H : u32 = 1 ;

 pub const __STDC_IEC_559__ : u32 = 1 ;

 pub const __STDC_IEC_559_COMPLEX__ : u32 = 1 ;

 pub const __STDC_ISO_10646__ : u32 = 201605 ;

 pub const __STDC_NO_THREADS__ : u32 = 1 ;

 pub const __GNU_LIBRARY__ : u32 = 6 ;

 pub const __GLIBC__ : u32 = 2 ;

 pub const __GLIBC_MINOR__ : u32 = 24 ;

 pub const _SYS_CDEFS_H : u32 = 1 ;

 pub const __WORDSIZE : u32 = 64 ;

 pub const __WORDSIZE_TIME64_COMPAT32 : u32 = 1 ;

 pub const __SYSCALL_WORDSIZE : u32 = 64 ;

 pub const _STDLIB_H : u32 = 1 ;

 pub const WNOHANG : u32 = 1 ;

 pub const WUNTRACED : u32 = 2 ;

 pub const WSTOPPED : u32 = 2 ;

 pub const WEXITED : u32 = 4 ;

 pub const WCONTINUED : u32 = 8 ;

 pub const WNOWAIT : u32 = 16777216 ;

 pub const __WNOTHREAD : u32 = 536870912 ;

 pub const __WALL : u32 = 1073741824 ;

 pub const __WCLONE : u32 = 2147483648 ;

 pub const __ENUM_IDTYPE_T : u32 = 1 ;

 pub const __W_CONTINUED : u32 = 65535 ;

 pub const __WCOREFLAG : u32 = 128 ;

 pub const __ldiv_t_defined : u32 = 1 ;

 pub const __lldiv_t_defined : u32 = 1 ;

 pub const RAND_MAX : u32 = 2147483647 ;

 pub const EXIT_FAILURE : u32 = 1 ;

 pub const EXIT_SUCCESS : u32 = 0 ;

 pub const _SYS_TYPES_H : u32 = 1 ;

 pub const _BITS_TYPES_H : u32 = 1 ;

 pub const _BITS_TYPESIZES_H : u32 = 1 ;

 pub const __OFF_T_MATCHES_OFF64_T : u32 = 1 ;

 pub const __INO_T_MATCHES_INO64_T : u32 = 1 ;

 pub const __FD_SETSIZE : u32 = 1024 ;

 pub const __clock_t_defined : u32 = 1 ;

 pub const __time_t_defined : u32 = 1 ;

 pub const __clockid_t_defined : u32 = 1 ;

 pub const __timer_t_defined : u32 = 1 ;

 pub const __BIT_TYPES_DEFINED__ : u32 = 1 ;

 pub const _ENDIAN_H : u32 = 1 ;

 pub const __LITTLE_ENDIAN : u32 = 1234 ;

 pub const __BIG_ENDIAN : u32 = 4321 ;

 pub const __PDP_ENDIAN : u32 = 3412 ;

 pub const __BYTE_ORDER : u32 = 1234 ;

 pub const __FLOAT_WORD_ORDER : u32 = 1234 ;

 pub const LITTLE_ENDIAN : u32 = 1234 ;

 pub const BIG_ENDIAN : u32 = 4321 ;

 pub const PDP_ENDIAN : u32 = 3412 ;

 pub const BYTE_ORDER : u32 = 1234 ;

 pub const _BITS_BYTESWAP_H : u32 = 1 ;

 pub const _SYS_SELECT_H : u32 = 1 ;

 pub const __FD_ZERO_STOS : & 'static [ u8 ;

 6usize ] = b"stosq\0" ;

 pub const _SIGSET_H_types : u32 = 1 ;

 pub const __timespec_defined : u32 = 1 ;

 pub const _STRUCT_TIMEVAL : u32 = 1 ;

 pub const FD_SETSIZE : u32 = 1024 ;

 pub const _SYS_SYSMACROS_H : u32 = 1 ;

 pub const _BITS_PTHREADTYPES_H : u32 = 1 ;

 pub const __SIZEOF_PTHREAD_ATTR_T : u32 = 56 ;

 pub const __SIZEOF_PTHREAD_MUTEX_T : u32 = 40 ;

 pub const __SIZEOF_PTHREAD_MUTEXATTR_T : u32 = 4 ;

 pub const __SIZEOF_PTHREAD_COND_T : u32 = 48 ;

 pub const __SIZEOF_PTHREAD_CONDATTR_T : u32 = 4 ;

 pub const __SIZEOF_PTHREAD_RWLOCK_T : u32 = 56 ;

 pub const __SIZEOF_PTHREAD_RWLOCKATTR_T : u32 = 8 ;

 pub const __SIZEOF_PTHREAD_BARRIER_T : u32 = 32 ;

 pub const __SIZEOF_PTHREAD_BARRIERATTR_T : u32 = 4 ;

 pub const __have_pthread_attr_t : u32 = 1 ;

 pub const __PTHREAD_MUTEX_HAVE_PREV : u32 = 1 ;

 pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED : u32 = 1 ;

 pub const _ALLOCA_H : u32 = 1 ;

 pub const _STDINT_H : u32 = 1 ;

 pub const _BITS_WCHAR_H : u32 = 1 ;

 pub const INT8_MIN : i32 = -128 ;

 pub const INT16_MIN : i32 = -32768 ;

 pub const INT32_MIN : i32 = -2147483648 ;

 pub const INT8_MAX : u32 = 127 ;

 pub const INT16_MAX : u32 = 32767 ;

 pub const INT32_MAX : u32 = 2147483647 ;

 pub const UINT8_MAX : u32 = 255 ;

 pub const UINT16_MAX : u32 = 65535 ;

 pub const UINT32_MAX : u32 = 4294967295 ;

 pub const INT_LEAST8_MIN : i32 = -128 ;

 pub const INT_LEAST16_MIN : i32 = -32768 ;

 pub const INT_LEAST32_MIN : i32 = -2147483648 ;

 pub const INT_LEAST8_MAX : u32 = 127 ;

 pub const INT_LEAST16_MAX : u32 = 32767 ;

 pub const INT_LEAST32_MAX : u32 = 2147483647 ;

 pub const UINT_LEAST8_MAX : u32 = 255 ;

 pub const UINT_LEAST16_MAX : u32 = 65535 ;

 pub const UINT_LEAST32_MAX : u32 = 4294967295 ;

 pub const INT_FAST8_MIN : i32 = -128 ;

 pub const INT_FAST16_MIN : i64 = -9223372036854775808 ;

 pub const INT_FAST32_MIN : i64 = -9223372036854775808 ;

 pub const INT_FAST8_MAX : u32 = 127 ;

 pub const INT_FAST16_MAX : u64 = 9223372036854775807 ;

 pub const INT_FAST32_MAX : u64 = 9223372036854775807 ;

 pub const UINT_FAST8_MAX : u32 = 255 ;

 pub const UINT_FAST16_MAX : i32 = -1 ;

 pub const UINT_FAST32_MAX : i32 = -1 ;

 pub const INTPTR_MIN : i64 = -9223372036854775808 ;

 pub const INTPTR_MAX : u64 = 9223372036854775807 ;

 pub const UINTPTR_MAX : i32 = -1 ;

 pub const PTRDIFF_MIN : i64 = -9223372036854775808 ;

 pub const PTRDIFF_MAX : u64 = 9223372036854775807 ;

 pub const SIG_ATOMIC_MIN : i32 = -2147483648 ;

 pub const SIG_ATOMIC_MAX : u32 = 2147483647 ;

 pub const SIZE_MAX : i32 = -1 ;

 pub const WINT_MIN : u32 = 0 ;

 pub const WINT_MAX : u32 = 4294967295 ;

 pub const ngx_link_func_module_version_33 : u32 = 33 ;

 pub const ngx_link_func_content_type_plaintext : & 'static [ u8 ;

 11usize ] = b"text/plain\0" ;

 pub const ngx_link_func_content_type_html : & 'static [ u8 ;

 25usize ] = b"text/html; charset=utf-8\0" ;

 pub const ngx_link_func_content_type_json : & 'static [ u8 ;

 17usize ] = b"application/json\0" ;

 pub const ngx_link_func_content_type_jsonp : & 'static [ u8 ;

 23usize ] = b"application/javascript\0" ;

 pub const ngx_link_func_content_type_xformencoded : & 'static [ u8 ;

 34usize ] = b"application/x-www-form-urlencoded\0" ;

 pub type wchar_t = :: std :: os :: raw :: c_int ;

 pub const idtype_t_P_ALL : idtype_t = 0 ;

 pub const idtype_t_P_PID : idtype_t = 1 ;

 pub const idtype_t_P_PGID : idtype_t = 2 ;

 pub type idtype_t = u32 ;

 # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct div_t { pub quot : :: std :: os :: raw :: c_int , pub rem : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_div_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < div_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( div_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < div_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( div_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < div_t > ( ) ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( div_t ) , "::" , stringify ! ( quot ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < div_t > ( ) ) ) . rem as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( div_t ) , "::" , stringify ! ( rem ) ) ) ;

 } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ldiv_t { pub quot : :: std :: os :: raw :: c_long , pub rem : :: std :: os :: raw :: c_long , } # [ test ] fn bindgen_test_layout_ldiv_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ldiv_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ldiv_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < ldiv_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ldiv_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ldiv_t > ( ) ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ldiv_t ) , "::" , stringify ! ( quot ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ldiv_t > ( ) ) ) . rem as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ldiv_t ) , "::" , stringify ! ( rem ) ) ) ;

 } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lldiv_t { pub quot : :: std :: os :: raw :: c_longlong , pub rem : :: std :: os :: raw :: c_longlong , } # [ test ] fn bindgen_test_layout_lldiv_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lldiv_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( lldiv_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < lldiv_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lldiv_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lldiv_t > ( ) ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lldiv_t ) , "::" , stringify ! ( quot ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lldiv_t > ( ) ) ) . rem as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lldiv_t ) , "::" , stringify ! ( rem ) ) ) ;

 } extern "C" { pub fn __ctype_get_mb_cur_max ( ) -> usize ;

 } extern "C" { pub fn atof ( __nptr : * const :: std :: os :: raw :: c_char ) -> f64 ;

 } extern "C" { pub fn atoi ( __nptr : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn atol ( __nptr : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_long ;

 } extern "C" { pub fn atoll ( __nptr : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_longlong ;

 } extern "C" { pub fn strtod ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char ) -> f64 ;

 } extern "C" { pub fn strtof ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char ) -> f32 ;

 } extern "C" { pub fn strtold ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char ) -> u128 ;

 } extern "C" { pub fn strtol ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_long ;

 } extern "C" { pub fn strtoul ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_ulong ;

 } extern "C" { pub fn strtoq ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_longlong ;

 } extern "C" { pub fn strtouq ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_ulonglong ;

 } extern "C" { pub fn strtoll ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_longlong ;

 } extern "C" { pub fn strtoull ( __nptr : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_ulonglong ;

 } extern "C" { pub fn l64a ( __n : :: std :: os :: raw :: c_long ) -> * mut :: std :: os :: raw :: c_char ;

 } extern "C" { pub fn a64l ( __s : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_long ;

 } pub type __u_char = :: std :: os :: raw :: c_uchar ;

 pub type __u_short = :: std :: os :: raw :: c_ushort ;

 pub type __u_int = :: std :: os :: raw :: c_uint ;

 pub type __u_long = :: std :: os :: raw :: c_ulong ;

 pub type __int8_t = :: std :: os :: raw :: c_schar ;

 pub type __uint8_t = :: std :: os :: raw :: c_uchar ;

 pub type __int16_t = :: std :: os :: raw :: c_short ;

 pub type __uint16_t = :: std :: os :: raw :: c_ushort ;

 pub type __int32_t = :: std :: os :: raw :: c_int ;

 pub type __uint32_t = :: std :: os :: raw :: c_uint ;

 pub type __int64_t = :: std :: os :: raw :: c_long ;

 pub type __uint64_t = :: std :: os :: raw :: c_ulong ;

 pub type __quad_t = :: std :: os :: raw :: c_long ;

 pub type __u_quad_t = :: std :: os :: raw :: c_ulong ;

 pub type __dev_t = :: std :: os :: raw :: c_ulong ;

 pub type __uid_t = :: std :: os :: raw :: c_uint ;

 pub type __gid_t = :: std :: os :: raw :: c_uint ;

 pub type __ino_t = :: std :: os :: raw :: c_ulong ;

 pub type __ino64_t = :: std :: os :: raw :: c_ulong ;

 pub type __mode_t = :: std :: os :: raw :: c_uint ;

 pub type __nlink_t = :: std :: os :: raw :: c_ulong ;

 pub type __off_t = :: std :: os :: raw :: c_long ;

 pub type __off64_t = :: std :: os :: raw :: c_long ;

 pub type __pid_t = :: std :: os :: raw :: c_int ;

 # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __fsid_t { pub __val : [ :: std :: os :: raw :: c_int ;

 2usize ] , } # [ test ] fn bindgen_test_layout___fsid_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __fsid_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __fsid_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < __fsid_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __fsid_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __fsid_t > ( ) ) ) . __val as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __fsid_t ) , "::" , stringify ! ( __val ) ) ) ;

 } pub type __clock_t = :: std :: os :: raw :: c_long ;

 pub type __rlim_t = :: std :: os :: raw :: c_ulong ;

 pub type __rlim64_t = :: std :: os :: raw :: c_ulong ;

 pub type __id_t = :: std :: os :: raw :: c_uint ;

 pub type __time_t = :: std :: os :: raw :: c_long ;

 pub type __useconds_t = :: std :: os :: raw :: c_uint ;

 pub type __suseconds_t = :: std :: os :: raw :: c_long ;

 pub type __daddr_t = :: std :: os :: raw :: c_int ;

 pub type __key_t = :: std :: os :: raw :: c_int ;

 pub type __clockid_t = :: std :: os :: raw :: c_int ;

 pub type __timer_t = * mut :: std :: os :: raw :: c_void ;

 pub type __blksize_t = :: std :: os :: raw :: c_long ;

 pub type __blkcnt_t = :: std :: os :: raw :: c_long ;

 pub type __blkcnt64_t = :: std :: os :: raw :: c_long ;

 pub type __fsblkcnt_t = :: std :: os :: raw :: c_ulong ;

 pub type __fsblkcnt64_t = :: std :: os :: raw :: c_ulong ;

 pub type __fsfilcnt_t = :: std :: os :: raw :: c_ulong ;

 pub type __fsfilcnt64_t = :: std :: os :: raw :: c_ulong ;

 pub type __fsword_t = :: std :: os :: raw :: c_long ;

 pub type __ssize_t = :: std :: os :: raw :: c_long ;

 pub type __syscall_slong_t = :: std :: os :: raw :: c_long ;

 pub type __syscall_ulong_t = :: std :: os :: raw :: c_ulong ;

 pub type __loff_t = __off64_t ;

 pub type __qaddr_t = * mut __quad_t ;

 pub type __caddr_t = * mut :: std :: os :: raw :: c_char ;

 pub type __intptr_t = :: std :: os :: raw :: c_long ;

 pub type __socklen_t = :: std :: os :: raw :: c_uint ;

 pub type u_char = __u_char ;

 pub type u_short = __u_short ;

 pub type u_int = __u_int ;

 pub type u_long = __u_long ;

 pub type quad_t = __quad_t ;

 pub type u_quad_t = __u_quad_t ;

 pub type fsid_t = __fsid_t ;

 pub type loff_t = __loff_t ;

 pub type ino_t = __ino_t ;

 pub type dev_t = __dev_t ;

 pub type gid_t = __gid_t ;

 pub type mode_t = __mode_t ;

 pub type nlink_t = __nlink_t ;

 pub type uid_t = __uid_t ;

 pub type off_t = __off_t ;

 pub type pid_t = __pid_t ;

 pub type id_t = __id_t ;

 pub type daddr_t = __daddr_t ;

 pub type caddr_t = __caddr_t ;

 pub type key_t = __key_t ;

 pub type clock_t = __clock_t ;

 pub type time_t = __time_t ;

 pub type clockid_t = __clockid_t ;

 pub type timer_t = __timer_t ;

 pub type ulong = :: std :: os :: raw :: c_ulong ;

 pub type ushort = :: std :: os :: raw :: c_ushort ;

 pub type uint = :: std :: os :: raw :: c_uint ;

 pub type u_int8_t = :: std :: os :: raw :: c_uchar ;

 pub type u_int16_t = :: std :: os :: raw :: c_ushort ;

 pub type u_int32_t = :: std :: os :: raw :: c_uint ;

 pub type u_int64_t = :: std :: os :: raw :: c_ulong ;

 pub type register_t = :: std :: os :: raw :: c_long ;

 pub type __sig_atomic_t = :: std :: os :: raw :: c_int ;

 # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __sigset_t { pub __val : [ :: std :: os :: raw :: c_ulong ;

 16usize ] , } # [ test ] fn bindgen_test_layout___sigset_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __sigset_t > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( __sigset_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < __sigset_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __sigset_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sigset_t > ( ) ) ) . __val as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __sigset_t ) , "::" , stringify ! ( __val ) ) ) ;

 } pub type sigset_t = __sigset_t ;

 # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct timespec { pub tv_sec : __time_t , pub tv_nsec : __syscall_slong_t , } # [ test ] fn bindgen_test_layout_timespec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timespec > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( timespec ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < timespec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( timespec ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < timespec > ( ) ) ) . tv_sec as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( timespec ) , "::" , stringify ! ( tv_sec ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < timespec > ( ) ) ) . tv_nsec as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( timespec ) , "::" , stringify ! ( tv_nsec ) ) ) ;

 } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct timeval { pub tv_sec : __time_t , pub tv_usec : __suseconds_t , } # [ test ] fn bindgen_test_layout_timeval ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timeval > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( timeval ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < timeval > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( timeval ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < timeval > ( ) ) ) . tv_sec as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( timeval ) , "::" , stringify ! ( tv_sec ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < timeval > ( ) ) ) . tv_usec as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( timeval ) , "::" , stringify ! ( tv_usec ) ) ) ;

 } pub type suseconds_t = __suseconds_t ;

 pub type __fd_mask = :: std :: os :: raw :: c_long ;

 # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct fd_set { pub __fds_bits : [ __fd_mask ;

 16usize ] , } # [ test ] fn bindgen_test_layout_fd_set ( ) { assert_eq ! ( :: std :: mem :: size_of :: < fd_set > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( fd_set ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < fd_set > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( fd_set ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < fd_set > ( ) ) ) . __fds_bits as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( fd_set ) , "::" , stringify ! ( __fds_bits ) ) ) ;

 } pub type fd_mask = __fd_mask ;

 extern "C" { pub fn select ( __nfds : :: std :: os :: raw :: c_int , __readfds : * mut fd_set , __writefds : * mut fd_set , __exceptfds : * mut fd_set , __timeout : * mut timeval ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn pselect ( __nfds : :: std :: os :: raw :: c_int , __readfds : * mut fd_set , __writefds : * mut fd_set , __exceptfds : * mut fd_set , __timeout : * const timespec , __sigmask : * const __sigset_t ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn gnu_dev_major ( __dev : :: std :: os :: raw :: c_ulonglong ) -> :: std :: os :: raw :: c_uint ;

 } extern "C" { pub fn gnu_dev_minor ( __dev : :: std :: os :: raw :: c_ulonglong ) -> :: std :: os :: raw :: c_uint ;

 } extern "C" { pub fn gnu_dev_makedev ( __major : :: std :: os :: raw :: c_uint , __minor : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_ulonglong ;

 } pub type blksize_t = __blksize_t ;

 pub type blkcnt_t = __blkcnt_t ;

 pub type fsblkcnt_t = __fsblkcnt_t ;

 pub type fsfilcnt_t = __fsfilcnt_t ;

 pub type pthread_t = :: std :: os :: raw :: c_ulong ;

 # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_attr_t { pub __size : [ :: std :: os :: raw :: c_char ;

 56usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ;

 7usize ] , } # [ test ] fn bindgen_test_layout_pthread_attr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_attr_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( pthread_attr_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < pthread_attr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_attr_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_attr_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_attr_t ) , "::" , stringify ! ( __size ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_attr_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_attr_t ) , "::" , stringify ! ( __align ) ) ) ;

 } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __pthread_internal_list { pub __prev : * mut __pthread_internal_list , pub __next : * mut __pthread_internal_list , } # [ test ] fn bindgen_test_layout___pthread_internal_list ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __pthread_internal_list > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( __pthread_internal_list ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < __pthread_internal_list > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __pthread_internal_list ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_internal_list > ( ) ) ) . __prev as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_internal_list ) , "::" , stringify ! ( __prev ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __pthread_internal_list > ( ) ) ) . __next as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __pthread_internal_list ) , "::" , stringify ! ( __next ) ) ) ;

 } pub type __pthread_list_t = __pthread_internal_list ;

 # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_mutex_t { pub __data : pthread_mutex_t___pthread_mutex_s , pub __size : [ :: std :: os :: raw :: c_char ;

 40usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ;

 5usize ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct pthread_mutex_t___pthread_mutex_s { pub __lock : :: std :: os :: raw :: c_int , pub __count : :: std :: os :: raw :: c_uint , pub __owner : :: std :: os :: raw :: c_int , pub __nusers : :: std :: os :: raw :: c_uint , pub __kind : :: std :: os :: raw :: c_int , pub __spins : :: std :: os :: raw :: c_short , pub __elision : :: std :: os :: raw :: c_short , pub __list : __pthread_list_t , } # [ test ] fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_mutex_t___pthread_mutex_s > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < pthread_mutex_t___pthread_mutex_s > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutex_t___pthread_mutex_s > ( ) ) ) . __lock as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __lock ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutex_t___pthread_mutex_s > ( ) ) ) . __count as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __count ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutex_t___pthread_mutex_s > ( ) ) ) . __owner as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __owner ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutex_t___pthread_mutex_s > ( ) ) ) . __nusers as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __nusers ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutex_t___pthread_mutex_s > ( ) ) ) . __kind as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __kind ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutex_t___pthread_mutex_s > ( ) ) ) . __spins as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __spins ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutex_t___pthread_mutex_s > ( ) ) ) . __elision as * const _ as usize } , 22usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __elision ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutex_t___pthread_mutex_s > ( ) ) ) . __list as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! ( __list ) ) ) ;

 } # [ test ] fn bindgen_test_layout_pthread_mutex_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_mutex_t > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( pthread_mutex_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < pthread_mutex_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_mutex_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutex_t > ( ) ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __data ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutex_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __size ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutex_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutex_t ) , "::" , stringify ! ( __align ) ) ) ;

 } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_mutexattr_t { pub __size : [ :: std :: os :: raw :: c_char ;

 4usize ] , pub __align : :: std :: os :: raw :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_mutexattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_mutexattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_mutexattr_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < pthread_mutexattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_mutexattr_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutexattr_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutexattr_t ) , "::" , stringify ! ( __size ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_mutexattr_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_mutexattr_t ) , "::" , stringify ! ( __align ) ) ) ;

 } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_cond_t { pub __data : pthread_cond_t__bindgen_ty_1 , pub __size : [ :: std :: os :: raw :: c_char ;

 48usize ] , pub __align : :: std :: os :: raw :: c_longlong , _bindgen_union_align : [ u64 ;

 6usize ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct pthread_cond_t__bindgen_ty_1 { pub __lock : :: std :: os :: raw :: c_int , pub __futex : :: std :: os :: raw :: c_uint , pub __total_seq : :: std :: os :: raw :: c_ulonglong , pub __wakeup_seq : :: std :: os :: raw :: c_ulonglong , pub __woken_seq : :: std :: os :: raw :: c_ulonglong , pub __mutex : * mut :: std :: os :: raw :: c_void , pub __nwaiters : :: std :: os :: raw :: c_uint , pub __broadcast_seq : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_cond_t__bindgen_ty_1 > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < pthread_cond_t__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_cond_t__bindgen_ty_1 > ( ) ) ) . __lock as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __lock ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_cond_t__bindgen_ty_1 > ( ) ) ) . __futex as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __futex ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_cond_t__bindgen_ty_1 > ( ) ) ) . __total_seq as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __total_seq ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_cond_t__bindgen_ty_1 > ( ) ) ) . __wakeup_seq as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __wakeup_seq ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_cond_t__bindgen_ty_1 > ( ) ) ) . __woken_seq as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __woken_seq ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_cond_t__bindgen_ty_1 > ( ) ) ) . __mutex as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __mutex ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_cond_t__bindgen_ty_1 > ( ) ) ) . __nwaiters as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __nwaiters ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_cond_t__bindgen_ty_1 > ( ) ) ) . __broadcast_seq as * const _ as usize } , 44usize , concat ! ( "Offset of field: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __broadcast_seq ) ) ) ;

 } # [ test ] fn bindgen_test_layout_pthread_cond_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_cond_t > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( pthread_cond_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < pthread_cond_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_cond_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_cond_t > ( ) ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __data ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_cond_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __size ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_cond_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_cond_t ) , "::" , stringify ! ( __align ) ) ) ;

 } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_condattr_t { pub __size : [ :: std :: os :: raw :: c_char ;

 4usize ] , pub __align : :: std :: os :: raw :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_condattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_condattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_condattr_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < pthread_condattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_condattr_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_condattr_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_condattr_t ) , "::" , stringify ! ( __size ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_condattr_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_condattr_t ) , "::" , stringify ! ( __align ) ) ) ;

 } pub type pthread_key_t = :: std :: os :: raw :: c_uint ;

 pub type pthread_once_t = :: std :: os :: raw :: c_int ;

 # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_rwlock_t { pub __data : pthread_rwlock_t__bindgen_ty_1 , pub __size : [ :: std :: os :: raw :: c_char ;

 56usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ;

 7usize ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct pthread_rwlock_t__bindgen_ty_1 { pub __lock : :: std :: os :: raw :: c_int , pub __nr_readers : :: std :: os :: raw :: c_uint , pub __readers_wakeup : :: std :: os :: raw :: c_uint , pub __writer_wakeup : :: std :: os :: raw :: c_uint , pub __nr_readers_queued : :: std :: os :: raw :: c_uint , pub __nr_writers_queued : :: std :: os :: raw :: c_uint , pub __writer : :: std :: os :: raw :: c_int , pub __shared : :: std :: os :: raw :: c_int , pub __rwelision : :: std :: os :: raw :: c_schar , pub __pad1 : [ :: std :: os :: raw :: c_uchar ;

 7usize ] , pub __pad2 : :: std :: os :: raw :: c_ulong , pub __flags : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_rwlock_t__bindgen_ty_1 > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < pthread_rwlock_t__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t__bindgen_ty_1 > ( ) ) ) . __lock as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __lock ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t__bindgen_ty_1 > ( ) ) ) . __nr_readers as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __nr_readers ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t__bindgen_ty_1 > ( ) ) ) . __readers_wakeup as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __readers_wakeup ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t__bindgen_ty_1 > ( ) ) ) . __writer_wakeup as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __writer_wakeup ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t__bindgen_ty_1 > ( ) ) ) . __nr_readers_queued as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __nr_readers_queued ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t__bindgen_ty_1 > ( ) ) ) . __nr_writers_queued as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __nr_writers_queued ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t__bindgen_ty_1 > ( ) ) ) . __writer as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __writer ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t__bindgen_ty_1 > ( ) ) ) . __shared as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __shared ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t__bindgen_ty_1 > ( ) ) ) . __rwelision as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __rwelision ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t__bindgen_ty_1 > ( ) ) ) . __pad1 as * const _ as usize } , 33usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad1 ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t__bindgen_ty_1 > ( ) ) ) . __pad2 as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad2 ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t__bindgen_ty_1 > ( ) ) ) . __flags as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __flags ) ) ) ;

 } # [ test ] fn bindgen_test_layout_pthread_rwlock_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_rwlock_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( pthread_rwlock_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < pthread_rwlock_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_rwlock_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t > ( ) ) ) . __data as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __data ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __size ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlock_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlock_t ) , "::" , stringify ! ( __align ) ) ) ;

 } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_rwlockattr_t { pub __size : [ :: std :: os :: raw :: c_char ;

 8usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_pthread_rwlockattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_rwlockattr_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( pthread_rwlockattr_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < pthread_rwlockattr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_rwlockattr_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlockattr_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlockattr_t ) , "::" , stringify ! ( __size ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_rwlockattr_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_rwlockattr_t ) , "::" , stringify ! ( __align ) ) ) ;

 } pub type pthread_spinlock_t = :: std :: os :: raw :: c_int ;

 # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_barrier_t { pub __size : [ :: std :: os :: raw :: c_char ;

 32usize ] , pub __align : :: std :: os :: raw :: c_long , _bindgen_union_align : [ u64 ;

 4usize ] , } # [ test ] fn bindgen_test_layout_pthread_barrier_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_barrier_t > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( pthread_barrier_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < pthread_barrier_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pthread_barrier_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_barrier_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_barrier_t ) , "::" , stringify ! ( __size ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_barrier_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_barrier_t ) , "::" , stringify ! ( __align ) ) ) ;

 } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union pthread_barrierattr_t { pub __size : [ :: std :: os :: raw :: c_char ;

 4usize ] , pub __align : :: std :: os :: raw :: c_int , _bindgen_union_align : u32 , } # [ test ] fn bindgen_test_layout_pthread_barrierattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pthread_barrierattr_t > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( pthread_barrierattr_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < pthread_barrierattr_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( pthread_barrierattr_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_barrierattr_t > ( ) ) ) . __size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_barrierattr_t ) , "::" , stringify ! ( __size ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pthread_barrierattr_t > ( ) ) ) . __align as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pthread_barrierattr_t ) , "::" , stringify ! ( __align ) ) ) ;

 } extern "C" { pub fn random ( ) -> :: std :: os :: raw :: c_long ;

 } extern "C" { pub fn srandom ( __seed : :: std :: os :: raw :: c_uint ) ;

 } extern "C" { pub fn initstate ( __seed : :: std :: os :: raw :: c_uint , __statebuf : * mut :: std :: os :: raw :: c_char , __statelen : usize ) -> * mut :: std :: os :: raw :: c_char ;

 } extern "C" { pub fn setstate ( __statebuf : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ;

 } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct random_data { pub fptr : * mut i32 , pub rptr : * mut i32 , pub state : * mut i32 , pub rand_type : :: std :: os :: raw :: c_int , pub rand_deg : :: std :: os :: raw :: c_int , pub rand_sep : :: std :: os :: raw :: c_int , pub end_ptr : * mut i32 , } # [ test ] fn bindgen_test_layout_random_data ( ) { assert_eq ! ( :: std :: mem :: size_of :: < random_data > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( random_data ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < random_data > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( random_data ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < random_data > ( ) ) ) . fptr as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( random_data ) , "::" , stringify ! ( fptr ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < random_data > ( ) ) ) . rptr as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rptr ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < random_data > ( ) ) ) . state as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( random_data ) , "::" , stringify ! ( state ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < random_data > ( ) ) ) . rand_type as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rand_type ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < random_data > ( ) ) ) . rand_deg as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rand_deg ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < random_data > ( ) ) ) . rand_sep as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( random_data ) , "::" , stringify ! ( rand_sep ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < random_data > ( ) ) ) . end_ptr as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( random_data ) , "::" , stringify ! ( end_ptr ) ) ) ;

 } extern "C" { pub fn random_r ( __buf : * mut random_data , __result : * mut i32 ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn srandom_r ( __seed : :: std :: os :: raw :: c_uint , __buf : * mut random_data ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn initstate_r ( __seed : :: std :: os :: raw :: c_uint , __statebuf : * mut :: std :: os :: raw :: c_char , __statelen : usize , __buf : * mut random_data ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn setstate_r ( __statebuf : * mut :: std :: os :: raw :: c_char , __buf : * mut random_data ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn rand ( ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn srand ( __seed : :: std :: os :: raw :: c_uint ) ;

 } extern "C" { pub fn rand_r ( __seed : * mut :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn drand48 ( ) -> f64 ;

 } extern "C" { pub fn erand48 ( __xsubi : * mut :: std :: os :: raw :: c_ushort ) -> f64 ;

 } extern "C" { pub fn lrand48 ( ) -> :: std :: os :: raw :: c_long ;

 } extern "C" { pub fn nrand48 ( __xsubi : * mut :: std :: os :: raw :: c_ushort ) -> :: std :: os :: raw :: c_long ;

 } extern "C" { pub fn mrand48 ( ) -> :: std :: os :: raw :: c_long ;

 } extern "C" { pub fn jrand48 ( __xsubi : * mut :: std :: os :: raw :: c_ushort ) -> :: std :: os :: raw :: c_long ;

 } extern "C" { pub fn srand48 ( __seedval : :: std :: os :: raw :: c_long ) ;

 } extern "C" { pub fn seed48 ( __seed16v : * mut :: std :: os :: raw :: c_ushort ) -> * mut :: std :: os :: raw :: c_ushort ;

 } extern "C" { pub fn lcong48 ( __param : * mut :: std :: os :: raw :: c_ushort ) ;

 } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct drand48_data { pub __x : [ :: std :: os :: raw :: c_ushort ;

 3usize ] , pub __old_x : [ :: std :: os :: raw :: c_ushort ;

 3usize ] , pub __c : :: std :: os :: raw :: c_ushort , pub __init : :: std :: os :: raw :: c_ushort , pub __a : :: std :: os :: raw :: c_ulonglong , } # [ test ] fn bindgen_test_layout_drand48_data ( ) { assert_eq ! ( :: std :: mem :: size_of :: < drand48_data > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( drand48_data ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < drand48_data > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( drand48_data ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < drand48_data > ( ) ) ) . __x as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __x ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < drand48_data > ( ) ) ) . __old_x as * const _ as usize } , 6usize , concat ! ( "Offset of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __old_x ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < drand48_data > ( ) ) ) . __c as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __c ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < drand48_data > ( ) ) ) . __init as * const _ as usize } , 14usize , concat ! ( "Offset of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __init ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < drand48_data > ( ) ) ) . __a as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( drand48_data ) , "::" , stringify ! ( __a ) ) ) ;

 } extern "C" { pub fn drand48_r ( __buffer : * mut drand48_data , __result : * mut f64 ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn erand48_r ( __xsubi : * mut :: std :: os :: raw :: c_ushort , __buffer : * mut drand48_data , __result : * mut f64 ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn lrand48_r ( __buffer : * mut drand48_data , __result : * mut :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn nrand48_r ( __xsubi : * mut :: std :: os :: raw :: c_ushort , __buffer : * mut drand48_data , __result : * mut :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn mrand48_r ( __buffer : * mut drand48_data , __result : * mut :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn jrand48_r ( __xsubi : * mut :: std :: os :: raw :: c_ushort , __buffer : * mut drand48_data , __result : * mut :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn srand48_r ( __seedval : :: std :: os :: raw :: c_long , __buffer : * mut drand48_data ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn seed48_r ( __seed16v : * mut :: std :: os :: raw :: c_ushort , __buffer : * mut drand48_data ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn lcong48_r ( __param : * mut :: std :: os :: raw :: c_ushort , __buffer : * mut drand48_data ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn malloc ( __size : :: std :: os :: raw :: c_ulong ) -> * mut :: std :: os :: raw :: c_void ;

 } extern "C" { pub fn calloc ( __nmemb : :: std :: os :: raw :: c_ulong , __size : :: std :: os :: raw :: c_ulong ) -> * mut :: std :: os :: raw :: c_void ;

 } extern "C" { pub fn realloc ( __ptr : * mut :: std :: os :: raw :: c_void , __size : :: std :: os :: raw :: c_ulong ) -> * mut :: std :: os :: raw :: c_void ;

 } extern "C" { pub fn free ( __ptr : * mut :: std :: os :: raw :: c_void ) ;

 } extern "C" { pub fn cfree ( __ptr : * mut :: std :: os :: raw :: c_void ) ;

 } extern "C" { pub fn alloca ( __size : :: std :: os :: raw :: c_ulong ) -> * mut :: std :: os :: raw :: c_void ;

 } extern "C" { pub fn valloc ( __size : usize ) -> * mut :: std :: os :: raw :: c_void ;

 } extern "C" { pub fn posix_memalign ( __memptr : * mut * mut :: std :: os :: raw :: c_void , __alignment : usize , __size : usize ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn aligned_alloc ( __alignment : usize , __size : usize ) -> * mut :: std :: os :: raw :: c_void ;

 } extern "C" { pub fn abort ( ) ;

 } extern "C" { pub fn atexit ( __func : :: std :: option :: Option < unsafe extern "C" fn ( ) > ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn at_quick_exit ( __func : :: std :: option :: Option < unsafe extern "C" fn ( ) > ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn on_exit ( __func : :: std :: option :: Option < unsafe extern "C" fn ( __status : :: std :: os :: raw :: c_int , __arg : * mut :: std :: os :: raw :: c_void ) > , __arg : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn exit ( __status : :: std :: os :: raw :: c_int ) ;

 } extern "C" { pub fn quick_exit ( __status : :: std :: os :: raw :: c_int ) ;

 } extern "C" { pub fn _Exit ( __status : :: std :: os :: raw :: c_int ) ;

 } extern "C" { pub fn getenv ( __name : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ;

 } extern "C" { pub fn putenv ( __string : * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn setenv ( __name : * const :: std :: os :: raw :: c_char , __value : * const :: std :: os :: raw :: c_char , __replace : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn unsetenv ( __name : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn clearenv ( ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn mktemp ( __template : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ;

 } extern "C" { pub fn mkstemp ( __template : * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn mkstemps ( __template : * mut :: std :: os :: raw :: c_char , __suffixlen : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn mkdtemp ( __template : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ;

 } extern "C" { pub fn system ( __command : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn realpath ( __name : * const :: std :: os :: raw :: c_char , __resolved : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ;

 } pub type __compar_fn_t = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ;

 extern "C" { pub fn bsearch ( __key : * const :: std :: os :: raw :: c_void , __base : * const :: std :: os :: raw :: c_void , __nmemb : usize , __size : usize , __compar : __compar_fn_t ) -> * mut :: std :: os :: raw :: c_void ;

 } extern "C" { pub fn qsort ( __base : * mut :: std :: os :: raw :: c_void , __nmemb : usize , __size : usize , __compar : __compar_fn_t ) ;

 } extern "C" { pub fn abs ( __x : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn labs ( __x : :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_long ;

 } extern "C" { pub fn llabs ( __x : :: std :: os :: raw :: c_longlong ) -> :: std :: os :: raw :: c_longlong ;

 } extern "C" { pub fn div ( __numer : :: std :: os :: raw :: c_int , __denom : :: std :: os :: raw :: c_int ) -> div_t ;

 } extern "C" { pub fn ldiv ( __numer : :: std :: os :: raw :: c_long , __denom : :: std :: os :: raw :: c_long ) -> ldiv_t ;

 } extern "C" { pub fn lldiv ( __numer : :: std :: os :: raw :: c_longlong , __denom : :: std :: os :: raw :: c_longlong ) -> lldiv_t ;

 } extern "C" { pub fn ecvt ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ;

 } extern "C" { pub fn fcvt ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ;

 } extern "C" { pub fn gcvt ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ;

 } extern "C" { pub fn qecvt ( __value : u128 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ;

 } extern "C" { pub fn qfcvt ( __value : u128 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ;

 } extern "C" { pub fn qgcvt ( __value : u128 , __ndigit : :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ;

 } extern "C" { pub fn ecvt_r ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __len : usize ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn fcvt_r ( __value : f64 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __len : usize ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn qecvt_r ( __value : u128 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __len : usize ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn qfcvt_r ( __value : u128 , __ndigit : :: std :: os :: raw :: c_int , __decpt : * mut :: std :: os :: raw :: c_int , __sign : * mut :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_char , __len : usize ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn mblen ( __s : * const :: std :: os :: raw :: c_char , __n : usize ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn mbtowc ( __pwc : * mut wchar_t , __s : * const :: std :: os :: raw :: c_char , __n : usize ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn wctomb ( __s : * mut :: std :: os :: raw :: c_char , __wchar : wchar_t ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn mbstowcs ( __pwcs : * mut wchar_t , __s : * const :: std :: os :: raw :: c_char , __n : usize ) -> usize ;

 } extern "C" { pub fn wcstombs ( __s : * mut :: std :: os :: raw :: c_char , __pwcs : * const wchar_t , __n : usize ) -> usize ;

 } extern "C" { pub fn rpmatch ( __response : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn getsubopt ( __optionp : * mut * mut :: std :: os :: raw :: c_char , __tokens : * const * mut :: std :: os :: raw :: c_char , __valuep : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn getloadavg ( __loadavg : * mut f64 , __nelem : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ;

 } pub type int_least8_t = :: std :: os :: raw :: c_schar ;

 pub type int_least16_t = :: std :: os :: raw :: c_short ;

 pub type int_least32_t = :: std :: os :: raw :: c_int ;

 pub type int_least64_t = :: std :: os :: raw :: c_long ;

 pub type uint_least8_t = :: std :: os :: raw :: c_uchar ;

 pub type uint_least16_t = :: std :: os :: raw :: c_ushort ;

 pub type uint_least32_t = :: std :: os :: raw :: c_uint ;

 pub type uint_least64_t = :: std :: os :: raw :: c_ulong ;

 pub type int_fast8_t = :: std :: os :: raw :: c_schar ;

 pub type int_fast16_t = :: std :: os :: raw :: c_long ;

 pub type int_fast32_t = :: std :: os :: raw :: c_long ;

 pub type int_fast64_t = :: std :: os :: raw :: c_long ;

 pub type uint_fast8_t = :: std :: os :: raw :: c_uchar ;

 pub type uint_fast16_t = :: std :: os :: raw :: c_ulong ;

 pub type uint_fast32_t = :: std :: os :: raw :: c_ulong ;

 pub type uint_fast64_t = :: std :: os :: raw :: c_ulong ;

 pub type intmax_t = :: std :: os :: raw :: c_long ;

 pub type uintmax_t = :: std :: os :: raw :: c_ulong ;

 # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ngx_link_func_ctx_t { pub req_args : * mut :: std :: os :: raw :: c_char , pub req_body : * mut u_char , pub req_body_len : usize , pub shared_mem : * mut :: std :: os :: raw :: c_void , pub __r__ : * mut :: std :: os :: raw :: c_void , pub __pl__ : * mut :: std :: os :: raw :: c_void , pub __log__ : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_ngx_link_func_ctx_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ngx_link_func_ctx_t > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( ngx_link_func_ctx_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < ngx_link_func_ctx_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ngx_link_func_ctx_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ngx_link_func_ctx_t > ( ) ) ) . req_args as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ngx_link_func_ctx_t ) , "::" , stringify ! ( req_args ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ngx_link_func_ctx_t > ( ) ) ) . req_body as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ngx_link_func_ctx_t ) , "::" , stringify ! ( req_body ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ngx_link_func_ctx_t > ( ) ) ) . req_body_len as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ngx_link_func_ctx_t ) , "::" , stringify ! ( req_body_len ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ngx_link_func_ctx_t > ( ) ) ) . shared_mem as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( ngx_link_func_ctx_t ) , "::" , stringify ! ( shared_mem ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ngx_link_func_ctx_t > ( ) ) ) . __r__ as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( ngx_link_func_ctx_t ) , "::" , stringify ! ( __r__ ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ngx_link_func_ctx_t > ( ) ) ) . __pl__ as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( ngx_link_func_ctx_t ) , "::" , stringify ! ( __pl__ ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ngx_link_func_ctx_t > ( ) ) ) . __log__ as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( ngx_link_func_ctx_t ) , "::" , stringify ! ( __log__ ) ) ) ;

 } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ngx_link_func_cycle_t { pub shared_mem : * mut :: std :: os :: raw :: c_void , pub has_error : :: std :: os :: raw :: c_int , pub __cycle__ : * mut :: std :: os :: raw :: c_void , pub __srv_cf__ : * mut :: std :: os :: raw :: c_void , pub __pl__ : * mut :: std :: os :: raw :: c_void , pub __log__ : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_ngx_link_func_cycle_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ngx_link_func_cycle_t > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( ngx_link_func_cycle_t ) ) ) ;

 assert_eq ! ( :: std :: mem :: align_of :: < ngx_link_func_cycle_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ngx_link_func_cycle_t ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ngx_link_func_cycle_t > ( ) ) ) . shared_mem as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ngx_link_func_cycle_t ) , "::" , stringify ! ( shared_mem ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ngx_link_func_cycle_t > ( ) ) ) . has_error as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ngx_link_func_cycle_t ) , "::" , stringify ! ( has_error ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ngx_link_func_cycle_t > ( ) ) ) . __cycle__ as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( ngx_link_func_cycle_t ) , "::" , stringify ! ( __cycle__ ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ngx_link_func_cycle_t > ( ) ) ) . __srv_cf__ as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( ngx_link_func_cycle_t ) , "::" , stringify ! ( __srv_cf__ ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ngx_link_func_cycle_t > ( ) ) ) . __pl__ as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( ngx_link_func_cycle_t ) , "::" , stringify ! ( __pl__ ) ) ) ;

 assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ngx_link_func_cycle_t > ( ) ) ) . __log__ as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( ngx_link_func_cycle_t ) , "::" , stringify ! ( __log__ ) ) ) ;

 } extern "C" { pub fn ngx_link_func_cyc_get_prop ( ctx : * mut ngx_link_func_cycle_t , key : * const :: std :: os :: raw :: c_char , keylen : usize ) -> * mut u_char ;

 } extern "C" { pub fn ngx_link_func_cyc_log_debug ( ctx : * mut ngx_link_func_cycle_t , msg : * const :: std :: os :: raw :: c_char ) ;

 } extern "C" { pub fn ngx_link_func_cyc_log_info ( ctx : * mut ngx_link_func_cycle_t , msg : * const :: std :: os :: raw :: c_char ) ;

 } extern "C" { pub fn ngx_link_func_cyc_log_warn ( ctx : * mut ngx_link_func_cycle_t , msg : * const :: std :: os :: raw :: c_char ) ;

 } extern "C" { pub fn ngx_link_func_cyc_log_err ( ctx : * mut ngx_link_func_cycle_t , msg : * const :: std :: os :: raw :: c_char ) ;

 } extern "C" { pub fn ngx_link_func_log_debug ( ctx : * mut ngx_link_func_ctx_t , msg : * const :: std :: os :: raw :: c_char ) ;

 } extern "C" { pub fn ngx_link_func_log_info ( ctx : * mut ngx_link_func_ctx_t , msg : * const :: std :: os :: raw :: c_char ) ;

 } extern "C" { pub fn ngx_link_func_log_warn ( ctx : * mut ngx_link_func_ctx_t , msg : * const :: std :: os :: raw :: c_char ) ;

 } extern "C" { pub fn ngx_link_func_log_err ( ctx : * mut ngx_link_func_ctx_t , msg : * const :: std :: os :: raw :: c_char ) ;

 } extern "C" { pub fn ngx_link_func_get_header ( ctx : * mut ngx_link_func_ctx_t , key : * const :: std :: os :: raw :: c_char , keylen : usize ) -> * mut u_char ;

 } extern "C" { pub fn ngx_link_func_get_prop ( ctx : * mut ngx_link_func_ctx_t , key : * const :: std :: os :: raw :: c_char , keylen : usize ) -> * mut u_char ;

 } extern "C" { pub fn ngx_link_func_get_query_param ( ctx : * mut ngx_link_func_ctx_t , key : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_void ;

 } extern "C" { pub fn ngx_link_func_palloc ( ctx : * mut ngx_link_func_ctx_t , size : usize ) -> * mut :: std :: os :: raw :: c_void ;

 } extern "C" { pub fn ngx_link_func_pcalloc ( ctx : * mut ngx_link_func_ctx_t , size : usize ) -> * mut :: std :: os :: raw :: c_void ;

 } extern "C" { pub fn ngx_link_func_add_header_in ( ctx : * mut ngx_link_func_ctx_t , key : * const :: std :: os :: raw :: c_char , keylen : usize , value : * const :: std :: os :: raw :: c_char , val_len : usize ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn ngx_link_func_add_header_out ( ctx : * mut ngx_link_func_ctx_t , key : * const :: std :: os :: raw :: c_char , keylen : usize , value : * const :: std :: os :: raw :: c_char , val_len : usize ) -> :: std :: os :: raw :: c_int ;

 } extern "C" { pub fn ngx_link_func_strdup ( ctx : * mut ngx_link_func_ctx_t , src : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ;

 } extern "C" { pub fn ngx_link_func_write_resp ( ctx : * mut ngx_link_func_ctx_t , status_code : usize , status_line : * const :: std :: os :: raw :: c_char , content_type : * const :: std :: os :: raw :: c_char , resp_content : * const :: std :: os :: raw :: c_char , resp_len : usize ) ;

 } extern "C" { pub fn ngx_link_func_write_resp_l ( ctx : * mut ngx_link_func_ctx_t , status_code : usize , status_line : * const :: std :: os :: raw :: c_char , status_line_len : usize , content_type : * const :: std :: os :: raw :: c_char , content_type_len : usize , resp_content : * const :: std :: os :: raw :: c_char , resp_content_len : usize ) ;

 } extern "C" { pub fn ngx_link_func_shmtx_trylock ( shared_mem : * mut :: std :: os :: raw :: c_void ) -> usize ;

 } extern "C" { pub fn ngx_link_func_shmtx_lock ( shared_mem : * mut :: std :: os :: raw :: c_void ) ;

 } extern "C" { pub fn ngx_link_func_shmtx_unlock ( shared_mem : * mut :: std :: os :: raw :: c_void ) ;

 } extern "C" { pub fn ngx_link_func_shm_alloc ( shared_mem : * mut :: std :: os :: raw :: c_void , size : usize ) -> * mut :: std :: os :: raw :: c_void ;

 } extern "C" { pub fn ngx_link_func_shm_free ( shared_mem : * mut :: std :: os :: raw :: c_void , ptr : * mut :: std :: os :: raw :: c_void ) ;

 } extern "C" { pub fn ngx_link_func_shm_alloc_locked ( shared_mem : * mut :: std :: os :: raw :: c_void , size : usize ) -> * mut :: std :: os :: raw :: c_void ;

 } extern "C" { pub fn ngx_link_func_shm_free_locked ( shared_mem : * mut :: std :: os :: raw :: c_void , ptr : * mut :: std :: os :: raw :: c_void ) ;

 } extern "C" { pub fn ngx_link_func_cache_get ( shared_mem : * mut :: std :: os :: raw :: c_void , key : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_void ;

 } extern "C" { pub fn ngx_link_func_cache_put ( shared_mem : * mut :: std :: os :: raw :: c_void , key : * const :: std :: os :: raw :: c_char , value : * mut :: std :: os :: raw :: c_void ) -> * mut :: std :: os :: raw :: c_void ;

 } extern "C" { pub fn ngx_link_func_cache_new ( shared_mem : * mut :: std :: os :: raw :: c_void , key : * const :: std :: os :: raw :: c_char , size : usize ) -> * mut :: std :: os :: raw :: c_void ;

 } extern "C" { pub fn ngx_link_func_cache_remove ( shared_mem : * mut :: std :: os :: raw :: c_void , key : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_void ;

 }