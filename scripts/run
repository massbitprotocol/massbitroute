#!/bin/bash
SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)
cd $SITE_ROOT
. $SITE_ROOT/.env
GITHUB_TRIES=10
export HOME=$SITE_ROOT
export ASDF=/massbit/massbitroute/app/src/bin/.asdf/installs
GRAFANA_VERSION=v8.2.1
PROMETHEUS_VERSION=v2.30.3
monitor_dir=/massbit/massbitroute/app/src/sites/services/monitor
portal_dir=/massbit/massbitroute/app/src/sites/services/api

deploy_dir=$portal_dir/public/deploy
gwman_dir=/massbit/massbitroute/app/src/sites/services/gwman
gw_dir=/massbit/massbitroute/app/src/sites/services/gateway

cmd=$SITE_ROOT/cmd_server
service_dir=/massbit/massbitroute/app/src/sites/services
type=api
gdnsd="/massbit/massbitroute/app/gbc/bin/.asdf/installs/gdnsd/v3.8.0/sbin/gdnsd -c $gwman_dir"
nginx="/massbit/massbitroute/app/src/bin/openresty/nginx/sbin/nginx -c /massbit/massbitroute/app/src/tmp/nginx.conf"
auth=$GIT_READ

_supervisor() {
	cat <<EOF >/etc/supervisor/conf.d/mbr_portal.conf
[program:mbr_portal]
command=/massbit/massbitroute/app/src/start_server
EOF
}
_load_env() {
	ROOT_DIR=$SITE_ROOT
	if [ -f "$ROOT_DIR/.env" ]; then
		source $ROOT_DIR/.env
		_file=$ROOT_DIR/.env
		if [ -z "$MBR_ENV" ]; then
			if [ -f "$ROOT_DIR/vars/ENV" ]; then
				export MBR_ENV=$(cat "$ROOT_DIR/vars/ENV")
			fi
		fi

		if [ -n "$MBR_ENV" ]; then
			_file=$ROOT_DIR/.env.$MBR_ENV
		fi
		source $_file
		mkdir -p $ROOT_DIR/src
		cat $_file | grep -v "^#" | awk -F'=' 'BEGIN{cfg="return {\n"}{sub(/^export\s*/,"",$1);cfg=cfg"[\""$1"\"]""=\""$2"\",\n"}END{print cfg"}"}' >$ROOT_DIR/src/env.lua
	fi
	env
}

_git_config() {
	_dir=$1
	if [ -z "$_dir" ]; then _dir=$PWD; fi
	git -C $_dir config --global user.name $GIT_AUTH_NAME
	git -C $_dir config --global user.email $GIT_AUTH_MAIL
}
_gitclone() {
  repo=$1
  dest=$2
  shift 2
  rem="$@"
  cmd="git clone $repo $dest $rem"
  $cmd
  st=$?
  i=0
  while [ \( $i -lt $GITHUB_TRIES \) -a \( $st -ne 0 \) ]; do
    echo "Can not clone code from github $repo. Retrying ${i}th ... !"
    $cmd
    st=$?
    i=$((i + 1))
  done
  if [ $st -ne 0 ]; then
    echo "Can not clone code from github $repo after $GITHUB_TRIES tries!"
    exit 1
  fi
  git -C $dest remote set-url origin $repo
}
_reload() {
	if [ ! -f "/usr/bin/parallel" ]; then apt install -y parallel; fi
	$cmd _update
	$cmd update
	tmp=$(mktemp)
	$cmd status | grep worker-portal-api | awk '{print $1}' >$tmp
	n=$(cat $tmp | wc -l)
	cat $tmp | while read f; do
		echo $cmd restart $f
	done | parallel -j$n
	rm $tmp
}
_install() {
	mkdir -p /massbit/massbitroute/app $service_dir $SITE_ROOT/etc $SITE_ROOT/logs
	git config --global http.sslverify false
	service=gbc

	dest=/massbit/massbitroute/app/$service
	if [ -d "$dest" ]; then
	  rm -rf $dest
	fi
	_gitclone https://github.com/massbitprotocol/massbitroute_gbc  $dest

	asdfdest=/massbit/massbitroute/app/gbc/bin/.asdf
	if [ -d "$asdfdest" ]; then
	  rm -rf $asdfdest
	fi
	_gitclone https://github.com/massbitprotocol/massbitroute_asdf  $asdfdest
	#servicedir=/massbit/massbitroute/app/gbc/bin/.asdf
	#if [ -d "$servicedir" ]; then
	#  rm -rf $servicedir
	#fi
	#git clone http://$GIT_READ@$PRIVATE_GIT_DOMAIN/massbitroute/${service}.git $servicedir

	service=ssl
	dest=/etc/letsencrypt/$service
	if [ -d "$dest" ]; then
	  rm -rf $dest
	fi
	_gitclone https://$auth@git.${DOMAIN}/massbitroute/${service}.git  $dest
	#git clone http://$GIT_READ@$PRIVATE_GIT_DOMAIN/massbitroute/${service}.git /etc/letsencrypt
	#git -C /etc/letsencrypt remote set-url origin http://$GIT_READ@$PRIVATE_GIT_DOMAIN/massbitroute/${service}.git

	service=mkagent
	dest=$SITE_ROOT/etc/$service
	if [ -d "$dest" ]; then
	  rm -rf $dest
	fi
	_gitclone https://github.com/massbitprotocol/massbitroute_mkagent  $dest
	#git clone http://$PUBLIC_GIT_DOMAIN/massbitroute/massbitroute_${service}.git $SITE_ROOT/etc/$service
	#git -C $SITE_ROOT/etc/$service remote set-url origin http://$GIT_READ@$PRIVATE_GIT_DOMAIN/massbitroute/massbitroute_${service}.git


	service=node
	git clone http://$GIT_NODE_WRITE@$GIT_DOMAIN/massbitroute/${service}.git $service_dir/$service

	service=gateway
	git clone http://$GIT_GATEWAY_WRITE@$GIT_DOMAIN/massbitroute/${service}.git $service_dir/$service
	git -C $service_dir/$service remote set-url origin http://$user:$pass@$GIT_DOMAIN/massbitroute/${service}.git

	service=gwman
	git clone http://$GIT_GWMAN_WRITE@$GIT_DOMAIN/massbitroute/${service}.git $service_dir/$service
	git -C $service_dir/$service remote set-url origin http://$user:$pass@$GIT_DOMAIN/massbitroute/${service}.git

	service=stat
	git clone http://$GIT_STAT_WRITE@$GIT_DOMAIN/massbitroute/${service}.git $service_dir/$service
	git -C $service_dir/$service remote set-url origin http://$user:$pass@$GIT_DOMAIN/massbitroute/${service}.git

	service=monitor
	git clone http://$GIT_MONITOR_WRITE@$GIT_DOMAIN/massbitroute/${service}.git $service_dir/$service
	git -C $service_dir/$service remote set-url origin http://$user:$pass@$GIT_DOMAIN/massbitroute/${service}.git

	# done

	service=$type
	gitdir=$service_dir/$service
	giturl=http://$GIT_API_WRITE@$GIT_DOMAIN/massbitroute/${service}.git
	git clone $giturl $gitdir
	git -C $gitdir remote set-url origin $giturl

	git clone https://github.com/massbitprotocol/mbr-app.git $service_dir/$service/public/mbr-app-prod

	service=apideploy
	gitdir=$service_dir/api/public/deploy
	giturl=http://$GIT_APIDEPLOY_WRITE@$GIT_DOMAIN/massbitroute/${service}.git
	git clone $giturl $gitdir
	git -C $gitdir remote set-url origin $giturl

	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	apt-get update
	apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev
	cp supervisor.conf /etc/supervisor/conf.d/${type}.conf
	systemctl enable supervisor
	systemctl start supervisor
	supervisorctl update

}

_test_node(){
    _id=$1
    _blocknet=$2
    _conf=$3
    _dir=$(mktemp -d)
    cd $service_dir/node
    rsync -avz * $_dir/ >/dev/null
    cd $_dir
    mkdir -p http.d/
    cat <<EOF >http.d/${_id}.conf
upstream ${_blocknet}.node.mbr.massbitroute.com {
server 127.0.0.1;
}
EOF
    cat $_conf >> http.d/${_id}.conf
    # cat http.d/${_id}.conf

    ./cmd_server _updateconf
    ./cmd_server nginx -t
    st=$?
    # ./cmd_server nginx -T
    rm -rf $_dir
    return $st
}
_git() {
	git "$@"
	st=$?
	echo $st
	# while [ $st -ne 0 ]; do
	# 	sleep 1
	# 	git "$@"
	# 	st=$?
	# done

}
_git_cmd_commit() {
	_cdir=$1
	shift
	if [ $# -gt 0 ]; then
		_time=$(date -u)
		_git_config $_cdir
		for _fdir in $@; do
			_git -C $_cdir add -f $_fdir
		done
		_git -C $_cdir commit -m "$_fdir at $_time"

	fi
}

_git_cmd() {
	cmd=$1
	shift
	if [ -z "$cmd" ]; then cmd=push; fi

	_dir_def=$service_dir
	for _service in api gateway node gwman stat monitor; do
		_dir="$_dir_def/$_service"

		# if [ "$cmd" = "push" ]; then
		case "$_service" in
		api)
			_dir="$_dir_def/$_service/public/deploy"
			# _dir=$_mydir
			;;
		esac
		# fi

		if [ "$cmd" = "pull" ]; then
			git -C $_dir reset --hard
		fi

		if [ "$cmd" = "commit" ]; then
			_mydir=""
			case "$_service" in
			api)
				_mydir="$_dir_def/$_service/public/deploy"
				# _dir=$_mydir
				;;
			gwman)
				_mydir="$_dir/data $_dir/conf.d $_dir/zones"
				;;
			stat)
				_mydir="$_dir/etc/prometheus"
				;;
			monitor)
				_mydir="$_dir/etc/main.mk $_dir/scripts/tokens.txt"
				;;

			esac

			if [ -n "$_mydir" ]; then
				_git_cmd_commit $_dir $_mydir
			fi
		else
			_git -C $_dir $cmd
		fi
	done

}

_scan_monitor_type() {
	dir=$1
	type=$2
	format=$3
	if [ ! -d "$dir/$type" ]; then return 1; fi
	cd $dir/$type

	find . -type f | sed 's/^\.\///g' | while read f; do
		id=$(basename $f)
		group=$type-$(dirname $f | sed 's/\//-/g')
		name=$group-$id
		if [ "$type" = "gateway" ]; then
			group=$(echo $group | cut -d'-' -f1-3)
			name=$group-$id
		else
			group=$type
		fi

		ip=$(cat $f | jq .ip | sed 's/\"//g')

		if [ "$format" = "address" ]; then
			echo "\"$name\": \"$ip\","
		elif [ "$format" = "host" ]; then
			echo "\"$name\","
			# echo "\"$name|$group\","
		elif [ "$format" = "token" ]; then
			export TOKEN=$(echo -n ${name} | sha1sum | cut -d' ' -f1)
			echo "$TOKEN $name"
		fi
	done
	return 0
}

_update_dapi_list() {
	_type=dapi
	_dir=$portal_dir/public/deploy/$_type
	if [ ! -d "$_dir" ]; then return 1; fi
	info_dir=$portal_dir/public/deploy/info/$_type
	mkdir -p $info_dir /tmp/info/$_type
	rm /tmp/info/$_type/*
	find $_dir -type f | while read f; do
		gateway_domain=$(cat $f | jq .gateway_domain | sed 's/\"//g')
		api_key=$(cat $f | jq .api_key | sed 's/\"//g')
		block=$(cat $f | jq .blockchain | sed 's/\"//g')
		net=$(cat $f | jq .network | sed 's/\"//g')
		user_id=$(cat $f | jq .user_id | sed 's/\"//g')
		status=$(cat $f | jq .status | sed 's/\"//g')
		name=$(basename $f)
		if [ -n "$block" ]; then
			mesg="$name $user_id $block $net $gateway_domain $api_key $status"
			echo $mesg >>/tmp/info/$_type/listid
			echo $mesg >>/tmp/info/$_type/listid-$block-$net
		fi
	done
	rm $info_dir/*
	mv /tmp/info/$_type/* $info_dir/
}
_update_user_list() {
	_type=user
	_dir=$portal_dir/public/deploy/$_type
	if [ ! -d "$_dir" ]; then return 1; fi
	info_dir=$portal_dir/public/deploy/info/$_type
	mkdir -p $info_dir
	tmp=$(mktemp)

	find $_dir -type f | while read f; do
		username=$(cat $f | jq .username | sed 's/\"//g')
		email=$(cat $f | jq .email | sed 's/\"//g')
		confirmed=$(cat $f | jq .confirmed | sed 's/\"//g')
		name=$(basename $f)
		echo "$name $username $email $confirmed" >>$tmp

	done
	mv $tmp $info_dir/listid
	chmod 755 $info_dir/listid
}
_update_gateway_list() {
	_type=gateway
	info_dir=$portal_dir/public/deploy/info/$_type
	tmp=$(mktemp)
	find $info_dir -type f -iname 'listid-*' | while read f; do
		cat $f >>$tmp
		echo >>$tmp
	done
	mv $tmp $info_dir/listid

}
_update_node_list() {
	_type=node
	info_dir=$portal_dir/public/deploy/info/$_type
	tmp=$(mktemp)
	find $info_dir -type f -iname 'listid-*' | while read f; do
		cat $f >>$tmp
		echo >>$tmp
	done
	mv $tmp $info_dir/listid

}

_rescan_conf() {
	svr=$1
	if [ -n "$svr" ]; then
		curl -k -H 'Content-Type: application/json' -H 'Host: dapi.massbit.io' "https://127.0.0.1/_internal_api/v1?action=${svr}.calljob" -d "{\"job\":\"${svr}.rescanconf\"}"
	else
		for svr1 in node gateway; do
			curl -k -H 'Content-Type: application/json' -H 'Host: dapi.massbit.io' "https://127.0.0.1/_internal_api/v1?action=${svr1}.calljob" -d "{\"job\":\"${svr1}.rescanconf\"}"
		done
	fi

}
_update_listid() {
	_update_gateway_list
	# _update_dapi_list
	_update_node_list
	# _update_user_list
}
_monitor() {

	branch=master
	$0 _git_cmd pull
	reload=0

	if [ ! -d "$SITE_ROOT/vars" ]; then mkdir -p $SITE_ROOT/vars; fi
	for d in /massbit/massbitroute/app/gbc \
		$portal_dir \
		$SITE_ROOT/etc/mkagent; do

		git -C $d pull origin $branch | grep -i "updating"
		if [ $? -eq 0 ]; then
			reload=1
		fi
	done

	if [ $reload -eq 1 ]; then
		$0 _reload
	fi

	$0 _git_cmd commit
	$0 _git_cmd push
	$cmd start all
}
loop() {
	while true; do
		timeout 60 $0 $@
		sleep 3
	done

}
_run() {
	rm -rf $SITE_ROOT/tmp/*
	sleep 3
	$SITE_ROOT/start_server
}
$@
