#!/bin/bash
TYPE="api"
SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)
export HOME=$SITE_ROOT

if [ -e "$SITE_ROOT/cmd_server" ]; then bash $SITE_ROOT/cmd_server _env; fi
if [ -f "$SITE_ROOT/.env_raw" ]; then source $SITE_ROOT/.env_raw; fi
source $SITE_ROOT/scripts/base.sh

cd $SITE_ROOT

mbr_root=/massbit/massbitroute/app
service_dir=$mbr_root/src/sites/services

export MBR_ENV=${MBR_ENV:-dev}
export BRANCH=${BRANCH:-dev}
export MBRAPP_BRANCH=${MBRAPP_BRANCH:-dev}
export ASDF_BRANCH=${ASDF_BRANCH:-dev}
export GBC_BRANCH=${GBC_BRANCH:-dev}
export SSL_BRANCH=${SSL_BRANCH:-dev}
export GWMAN_BRANCH=${GWMAN_BRANCH:-dev}
export NODE_BRANCH=${NODE_BRANCH:-dev}
export GATEWAY_BRANCH=${GATEWAY_BRANCH:-dev}
export STAT_BRANCH=${STAT_BRANCH:-dev}
export MONITOR_BRANCH=${MONITOR_BRANCH:-dev}
export API_BRANCH=${API_BRANCH:-dev}
export SESSION_BRANCH=${SESSION_BRANCH:-dev}
export GIT_BRANCH=${GIT_BRANCH:-dev}
export MKAGENT_BRANCH=${MKAGENT_BRANCH:-dev}

monitor_dir=/massbit/massbitroute/app/src/sites/services/monitor
portal_dir=/massbit/massbitroute/app/src/sites/services/api

deploy_dir=$portal_dir/public/deploy
gwman_dir=/massbit/massbitroute/app/src/sites/services/gwman
gw_dir=/massbit/massbitroute/app/src/sites/services/gateway

cmd_server=$SITE_ROOT/cmd_server

_repo() {
	REPOS="\
$SITE_ROOT/env|$GIT_PRIVATE_READ_URL/massbitroute/env.git|$MBR_ENV \
/etc/letsencrypt|$GIT_PRIVATE_READ_URL/massbitroute/ssl.git|$SSL_BRANCH \
 $mbr_root/gbc|https://github.com/massbitprotocol/massbitroute_gbc|$GBC_BRANCH \
 $mbr_root/gbc/bin/.asdf|https://github.com/massbitprotocol/massbitroute_asdf|$ASDF_BRANCH \
  $service_dir/gwman|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gwman.git|$GWMAN_BRANCH \
  $service_dir/gwman/data|https://$GIT_GWMANDEPLOY_WRITE@$GIT_PRIVATE_DOMAIN/massbitroute/gwmandeploy.git|$GWMAN_BRANCH \
  $service_dir/api|$GIT_PUBLIC_URL/massbitprotocol/massbitroute.git|$API_BRANCH \
  $service_dir/api/public/deploy|https://$GIT_APIDEPLOY_WRITE@$GIT_PRIVATE_DOMAIN/massbitroute/apideploy.git|$API_BRANCH \
  $service_dir/api/public/mbr-app-prod|$GIT_PUBLIC_URL/massbitprotocol/mbr-app.git|$MBRAPP_BRANCH \
  $service_dir/stat|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_stat.git|$STAT_BRANCH \
  $service_dir/stat/etc/conf|https://$GIT_STATDEPLOY_WRITE@$GIT_PRIVATE_DOMAIN/massbitroute/statdeploy.git|$STAT_BRANCH \
  $service_dir/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git|$MKAGENT_BRANCH \
  $service_dir/node|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_node.git|$NODE_BRANCH \
  $service_dir/gateway|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gateway.git|$GATEWAY_BRANCH \

"
}

_repo

_tune_os() {
	#dns
	sed 's/#DNSStubListener=yes/DNSStubListener=no/' /etc/systemd/resolved.conf -i
	pkill -f systemd-resolve

	rm /etc/resolv.conf
	echo nameserver 8.8.8.8 >/etc/resolv.conf
	systemctl stop systemd-resolved
	systemctl disable systemd-resolved
}

_prepare() {
	echo "Prepare"
	mkdir -p $SITE_ROOT/logs/nginx $SITE_ROOT/db $SITE_ROOT/tmp $SITE_ROOT/db

	if [ ! -f "/usr/bin/parallel" ]; then
		apt update
		apt install -y parallel
	fi

	if [ ! -f "$SITE_ROOT/data/geoip/GeoIP2-City.mmdb" ]; then
		apt update
		apt-get install -y xz-utils
		tar -xvJf $SITE_ROOT/data/geoip/GeoIP2-City.mmdb.tar.xz -C $SITE_ROOT/data/geoip
	fi
}

_install_repos() {
	_git_config
	_repo
	for _pathgit in $REPOS; do
		_path=$(echo $_pathgit | cut -d'|' -f1)
		_url=$(echo $_pathgit | cut -d'|' -f2)
		_branch=$(echo $_pathgit | cut -d'|' -f3)
		_git_clone $_url $_path $_branch
	done
}
_init() {
	if [ -z "$GIT_PRIVATE_READ_URL" ]; then
		echo "Need GIT_PRIVATE_READ_URL"
		exit 1
	fi
	_tune_os
	if [ ! -f "$SITE_ROOT/.env" ]; then
		echo "$MBR_ENV" >$SITE_ROOT/.env
	fi

	source $SITE_ROOT/.env

	_git_clone $GIT_PRIVATE_READ_URL/massbitroute/env.git /massbit/massbitroute/app/src/env $MBR_ENV
	_git_clone $GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git /massbit/massbitroute/app/gbc
	_git_clone $GIT_PUBLIC_URL/massbitprotocol/mbr-app.git $SITE_ROOT/public/mbr-app-prod $MBRAPP_BRANCH

	bash $SITE_ROOT/cmd_server _env
	source $SITE_ROOT/.env_raw
	_repo
	bash $SITE_ROOT/scripts/mbr_app.sh _build_prod $MBRAPP_BRANCH
}
_supervisor() {
	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	apt-get update
	apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev \
		liburcu-dev libev-dev libsodium-dev libtool libunwind-dev libmaxminddb-dev

	systemctl enable supervisor
	systemctl start supervisor

	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	supervisorctl update
}
_install() {
	_init
	_prepare
	_install_repos
	_supervisor
}
_reload() {
	$cmd_server _update
	tmp=$(mktemp)
	$cmd_server status | grep worker-portal-api | awk '{print $1}' >$tmp
	n=$(cat $tmp | wc -l)
	cat $tmp | while read f; do
		echo $cmd_server restart $f
	done | parallel -j$n
	rm $tmp
}
_test_node() {
	_id=$1
	_blocknet=$2
	_conf=$3
	_dir=$(mktemp -d)
	cd $service_dir/gateway
	rsync -avz * $_dir/ >/dev/null
	cd $_dir
	mkdir -p http.d logs
	cat <<EOF >http.d/${_id}.conf
upstream ${_blocknet}.node.mbr.${DOMAIN} {
server 127.0.0.1;
}
EOF
	cat $_conf >>http.d/${_id}.conf
	# cat http.d/${_id}.conf

	./cmd_server _updateconf
	./cmd_server nginx -t
	st=$?
	# ./cmd_server nginx -T
	rm -rf $_dir
	return $st

}

_git_cmd_commit() {
	_cdir=$1
	shift
	if [ $# -gt 0 ]; then
		_time=$(date -u)
		_git_config $_cdir
		for _fdir in $@; do
			git -C $_cdir add -f $_fdir
		done
		git -C $_cdir commit -m "$_fdir at $_time"

	fi
}

_git_cmd() {
	cmd=$1
	shift
	list_push="apideploy gwmandeploy statdeploy"
	list_pull="api apideploy gwman gwmandeploy stat statdeploy"
	if [ -z "$cmd" ]; then cmd=push; fi

	list=""
	case "$cmd" in
	pull)
		list="$list_pull"
		;;
	push)
		list="$list_push"
		;;
	commit)
		list="$list_push"
		;;
	esac

	_dir_def=$service_dir
	for _service in $list; do
		_dir="$_dir_def/$_service"

		case "$_service" in
		statdeploy)
			_dir="$_dir_def/stat/etc/conf"
			;;
		apideploy)
			_dir="$_dir_def/api/public/deploy"
			;;
		gwmandeploy)
			_dir="$_dir_def/gwman/data"
			;;
		esac

		if [ "$cmd" = "commit" ]; then
			_mydir="$_dir"
			# case "$_service" in
			# api)
			# 	_mydir="$_dir_def/$_service/public/deploy"
			# 	# _dir=$_mydir
			# 	;;
			# gwmandeploy)
			# 	_mydir="$_dir"
			# 	;;
			# gwman)
			# 	_mydir="$_dir/data $_dir/conf.d $_dir/zones"
			# 	;;
			# stat)
			# 	_mydir="$_dir/etc/prometheus"
			# 	;;
			# monitor)
			# 	_mydir="$_dir/etc/main.mk $_dir/scripts/tokens.txt"
			# 	;;

			# esac

			# if [ -n "$_mydir" ]; then
			_git_cmd_commit $_dir $_mydir
			# fi
		else
			git -C $_dir $cmd
		fi
	done

}

_scan_monitor_type() {
	dir=$1
	type=$2
	format=$3
	if [ ! -d "$dir/$type" ]; then return 1; fi
	cd $dir/$type

	find . -type f | sed 's/^\.\///g' | while read f; do
		id=$(basename $f)
		group=$type-$(dirname $f | sed 's/\//-/g')
		name=$group-$id
		if [ "$type" = "gateway" ]; then
			group=$(echo $group | cut -d'-' -f1-3)
			name=$group-$id
		else
			group=$type
		fi

		ip=$(cat $f | jq .ip | sed 's/\"//g')

		if [ "$format" = "address" ]; then
			echo "\"$name\": \"$ip\","
		elif [ "$format" = "host" ]; then
			echo "\"$name\","
			# echo "\"$name|$group\","
		elif [ "$format" = "token" ]; then
			export TOKEN=$(echo -n ${name} | sha1sum | cut -d' ' -f1)
			echo "$TOKEN $name"
		fi
	done
	return 0
}

_update_dapi_list() {
	_type=dapi
	_dir=$portal_dir/public/deploy/$_type
	if [ ! -d "$_dir" ]; then return 1; fi
	info_dir=$portal_dir/public/deploy/info/$_type
	mkdir -p $info_dir /tmp/info/$_type
	rm /tmp/info/$_type/*
	find $_dir -type f | while read f; do
		gateway_domain=$(cat $f | jq .gateway_domain | sed 's/\"//g')
		api_key=$(cat $f | jq .api_key | sed 's/\"//g')
		block=$(cat $f | jq .blockchain | sed 's/\"//g')
		net=$(cat $f | jq .network | sed 's/\"//g')
		user_id=$(cat $f | jq .user_id | sed 's/\"//g')
		status=$(cat $f | jq .status | sed 's/\"//g')
		name=$(basename $f)
		if [ -n "$block" ]; then
			mesg="$name $user_id $block $net $gateway_domain $api_key $status"
			echo $mesg >>/tmp/info/$_type/listid
			echo $mesg >>/tmp/info/$_type/listid-$block-$net
		fi
	done
	rm $info_dir/*
	mv /tmp/info/$_type/* $info_dir/
}
_update_user_list() {
	_type=user
	_dir=$portal_dir/public/deploy/$_type
	if [ ! -d "$_dir" ]; then return 1; fi
	info_dir=$portal_dir/public/deploy/info/$_type
	mkdir -p $info_dir
	tmp=$(mktemp)

	find $_dir -type f | while read f; do
		username=$(cat $f | jq .username | sed 's/\"//g')
		email=$(cat $f | jq .email | sed 's/\"//g')
		confirmed=$(cat $f | jq .confirmed | sed 's/\"//g')
		name=$(basename $f)
		echo "$name $username $email $confirmed" >>$tmp

	done
	mv $tmp $info_dir/listid
	chmod 755 $info_dir/listid
}
_update_gateway_list() {
	_type=gateway
	info_dir=$portal_dir/public/deploy/info/$_type
	tmp=$(mktemp)
	find $info_dir -type f -iname 'listid-*' | while read f; do
		cat $f >>$tmp
		echo >>$tmp
	done
	mv $tmp $info_dir/listid

}
_update_node_list() {
	_type=node
	info_dir=$portal_dir/public/deploy/info/$_type
	tmp=$(mktemp)
	find $info_dir -type f -iname 'listid-*' | while read f; do
		cat $f >>$tmp
		echo >>$tmp
	done
	mv $tmp $info_dir/listid

}

_rescan_conf() {
	svr=$1
	if [ -n "$svr" ]; then
		curl -k -H 'Content-Type: application/json' -H "Host: dapi.$DOMAIN" "https://127.0.0.1/_internal_api/v1?action=${svr}.calljob" -d "{\"job\":\"${svr}.rescanconf\"}"
	else
		for svr1 in node gateway; do
			curl -k -H 'Content-Type: application/json' -H "Host: dapi.$DOMAIN" "https://127.0.0.1/_internal_api/v1?action=${svr1}.calljob" -d "{\"job\":\"${svr1}.rescanconf\"}"
		done
	fi

}
_update_listid() {
	_update_gateway_list

	_update_dapi_list
	_update_node_list
	_update_user_list

}
_update_repos() {
	_repo
	_update_sources $REPOS
	_st_repo=$?
	return $_st_repo
}

_update() {
	echo "Update"
	_st_update=0
	timeout 60 $0 _git_cmd pull
	timeout 60 $0 _git_cmd commit
	timeout 60 $0 _git_cmd push

	_update_repos
	_st_update=$?

	return $_st_update
}

_monitor() {

	# _update_sources $REPOS
	# _update_repos
	# is_reload=$?

	_update
	# if [ $is_reload -ne 0 ]; then
	is_reload=$?
	# fi

	if [ $is_reload -ne 0 ]; then
		$0 _reload
	fi

}

_run() {
	rm -rf $SITE_ROOT/tmp/*

	$SITE_ROOT/start_server
}
$@
