#!/bin/bash
TYPE="api"
SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)
export HOME=$SITE_ROOT
ROOT_DIR=$SITE_ROOT
redis="$ROOT_DIR/bin/redis/bin/redis-cli -s $ROOT_DIR/tmp/redis.sock"
source $SITE_ROOT/scripts/base.sh

cd $SITE_ROOT

mbr_root=/massbit/massbitroute/app
service_dir=$mbr_root/src/sites/services

monitor_dir=/massbit/massbitroute/app/src/sites/services/monitor
portal_dir=/massbit/massbitroute/app/src/sites/services/api

deploy_dir=$portal_dir/public/deploy
gwman_dir=/massbit/massbitroute/app/src/sites/services/gwman
gw_dir=/massbit/massbitroute/app/src/sites/services/gateway

cmd_server=$SITE_ROOT/cmd_server

_reload() {

	$cmd_server status | grep worker- | awk '{print $1}' | while read f; do
		$cmd_server restart $f
	done
	rm /tmp/updateconfig.lock
	$SITE_ROOT/cmd_server _update
	$SITE_ROOT/cmd_server update
	$SITE_ROOT/cmd_server start all
}
_repo() {

	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	if [ -z "$GIT_PUBLIC_URL" ]; then
		echo "GIT_PUBLIC_URL missing"
		exit 1
	fi
	export ASDF_BRANCH=latest
	export MKAGENT_BRANCH=latest
	export GBC_BRANCH=latest
	export NODE_BRANCH=latest
	export GATEWAY_BRANCH=latest
	export GWMAN_BRANCH=latest
	REPOS="\
  $service_dir/gwman|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gwman.git|$GWMAN_BRANCH \
  $service_dir/node|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_node.git|$NODE_BRANCH \
  $service_dir/gateway|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gateway.git|$GATEWAY_BRANCH \
  $service_dir/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git|$MKAGENT_BRANCH \
	 $mbr_root/gbc|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc|$GBC_BRANCH \
	 $mbr_root/gbc/bin/.asdf|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_asdf|$ASDF_BRANCH \
"

}

_repo_private() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	if [ -z "$GIT_PRIVATE_READ_URL" ]; then
		echo "GIT_PRIVATE_READ_URL missing"
		exit 1
	fi
	if [ -z "$GIT_PRIVATE_BRANCH" ]; then
		echo "GIT_PRIVATE_BRANCH missing"
		exit 1
	fi

	# export MKAGENT_BRANCH=${MKAGENT_BRANCH:-$MBR_ENV}

	# export GBC_BRANCH=${GBC_BRANCH:-$MBR_ENV}
	# export ASDF_BRANCH=${ASDF_BRANCH:-$MBR_ENV}
	# export GWMAN_BRANCH=${GWMAN_BRANCH:-$MBR_ENV}

	export ENV_BRANCH=${ENV_BRANCH:-$GIT_PRIVATE_BRANCH}
	export SSL_BRANCH=${SSL_BRANCH:-$GIT_PRIVATE_BRANCH}

	export GWMANDEPLOY_BRANCH=${GWMANDEPLOY_BRANCH:-$GIT_PRIVATE_BRANCH}
	export APIDEPLOY_BRANCH=${APIDEPLOY_BRANCH:-$GIT_PRIVATE_BRANCH}

	# export NODE_BRANCH=${NODE_BRANCH:-$MBR_ENV}
	# export GATEWAY_BRANCH=${GATEWAY_BRANCH:-$MBR_ENV}
	# export API_BRANCH=${API_BRANCH:-$MBR_ENV}

	_env

	REPOS_RUNTIME="\
  $service_dir/gwman/data|http://$GIT_GWMANDEPLOY_WRITE@$GIT_PRIVATE_DOMAIN/massbitroute/gwmandeploy.git|$GWMANDEPLOY_BRANCH \
  $service_dir/api/public/deploy|http://$GIT_APIDEPLOY_WRITE@$GIT_PRIVATE_DOMAIN/massbitroute/apideploy.git|$APIDEPLOY_BRANCH \
"
	REPOS_PRIVATE="\
$SITE_ROOT/env|$GIT_PRIVATE_READ_URL/massbitroute/env.git|$ENV_BRANCH \
/etc/letsencrypt|$GIT_PRIVATE_READ_URL/massbitroute/ssl.git|$SSL_BRANCH \
"

}

# _tune_os() {
# 	#dns
# 	sed 's/#DNSStubListener=yes/DNSStubListener=no/' /etc/systemd/resolved.conf -i
# 	pkill -f systemd-resolve

# 	rm /etc/resolv.conf
# 	echo nameserver 8.8.8.8 >/etc/resolv.conf
# 	systemctl stop systemd-resolved
# 	systemctl disable systemd-resolved
# }

_prepare() {
	echo "Prepare"
	mkdir -p $SITE_ROOT/logs/nginx $SITE_ROOT/db $SITE_ROOT/tmp $SITE_ROOT/db
	if [ ! -f "$SITE_ROOT/data/geoip/GeoIP2-City.mmdb" ]; then
		tar -xvJf $SITE_ROOT/data/geoip/GeoIP2-City.mmdb.tar.xz -C $SITE_ROOT/data/geoip
	fi
}

_supervisor() {
	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	# apt-get update
	# apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev \
	# 	liburcu-dev libev-dev libsodium-dev libtool libunwind-dev libmaxminddb-dev cron rsync
	if [ -f "/usr/bin/systemctl" ]; then
		systemctl enable supervisor
		systemctl start supervisor
	fi

	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	if [ "$MBR_MODE" != "docker" ]; then
		supervisorctl update
	fi
}

_run_test() {
	cd $SITE_ROOT
	export PATH=$PATH:$SITE_ROOT/bin/openresty/nginx/sbin

	supervisorctl stop mbr_api_monitor

	rm $SITE_ROOT/src/env.lua
	env_src=$SITE_ROOT/env/env.lua
	sed /PARTNER_ID/d -i $env_src
	sed /SID/d -i $env_src
	sed '/}/i ["PARTNER_ID"]="fc78b64c5c33f3f270700b0c4d3e7998188035ab",' -i $env_src
	sed '/}/i ["SID"]="403716b0f58a7d6ddec769f8ca6008f2c1c0cea6"' -i $env_src

	cp $env_src $SITE_ROOT/src/env.lua
	_reload

	if [ $# -ne 0 ]; then
		prove -r $@
	else
		prove -r t
	fi

}

_install_test() {
	apt update
	apt install -y make
	export PERL_MM_USE_DEFAULT=1
	yes | cpan -i Test::Nginx
	cd $SITE_ROOT
	ls -d $SITE_ROOT/.cpan/build/* /root/.cpan/build/* | while read d; do
		cd $d
		make install
		cd -
	done
}

_install_one() {
	_prepare
	_install_repos
}

_install() {
	_install_one
	_supervisor
}
_test_node() {
	_id=$1
	_blocknet=$2
	_conf=$3
	_dir=$(mktemp -d)
	cd $service_dir/gateway
	touch .env
	touch .env_raw
	rsync -avz * $_dir/ >/dev/null
	cd $_dir
	mkdir -p http.d logs
	cat <<EOF >.env
export GIT_PUBLIC_URL="https://github.com"
export MBR_ENV=$MBR_ENV
EOF
	cat <<EOF >http.d/${_id}.conf
upstream ws-${_blocknet}.node.mbr.${DOMAIN} {
server 127.0.0.1;
}
upstream ${_blocknet}-ws.node.mbr.${DOMAIN} {
server 127.0.0.1;
}
upstream ${_blocknet}.node.mbr.${DOMAIN} {
server 127.0.0.1;
}
EOF
	cat $_conf >>http.d/${_id}.conf
	# cat http.d/${_id}.conf

	$cmd_server _updateconf
	$cmd_server nginx -t
	st=$?
	rm -rf $_dir
	return $st

}

_rescan_conf() {
	svr=$1
	if [ -n "$svr" ]; then
		curl -k -H 'Content-Type: application/json' -H "Host: dapi.$DOMAIN" "https://127.0.0.1/_internal_api/v1?action=${svr}.calljob" -d "{\"job\":\"${svr}.rescanconf\"}"
	else
		for svr1 in node gateway; do
			curl -k -H 'Content-Type: application/json' -H "Host: dapi.$DOMAIN" "https://127.0.0.1/_internal_api/v1?action=${svr1}.calljob" -d "{\"job\":\"${svr1}.rescanconf\"}"
		done
	fi

}

_install_repos() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	_repo
	_install_sources $REPOS
	_install_status=$?
	return $_install_status
}

_update_repos() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	if [ -z "$GIT_PRIVATE_READ_URL" ]; then
		echo "Need GIT_PRIVATE_READ_URL"
		exit 1
	fi
	_repo
	_update_sources $REPOS
	_update_status=$?

	_repo_private
	_update_sources $REPOS_PRIVATE
	if [ $_update_status -eq 0 ]; then
		_update_status=$?
	fi

	_update_sources $REPOS_RUNTIME
	if [ $_update_status -eq 0 ]; then
		_update_status=$?
	fi
	return $_update_status
}
_commit_repos() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	if [ -z "$GIT_PRIVATE_READ_URL" ]; then
		echo "Need GIT_PRIVATE_READ_URL"
		exit 1
	fi
	_repo_private
	_commit_sources $REPOS_RUNTIME
	_commit_status=$?
	return $_commit_status
}

_cleanupmeforsure() {
	read -p "Are you sure? " -n 1 -r
	echo # (optional) move to a new line
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		echo "Clean redis"
		$cmd_server redis -n 1 flushall
		echo "Clean dapideploy"
		for d in node nodeconf gateway gatewayconf dapi dapiconf info; do
			find $SITE_ROOT/public/deploy/$d -type f -delete

		done
		find $SITE_ROOT/../gwman/data/conf.d/geolocation.d -type f -not -iname "_*" -delete
		find $SITE_ROOT/../gwman/data/zones -not -name "$DOMAIN" -not -name ".gitkeep" -type f -delete
		# $SITE_ROOT/../gwman/scripts/run _prepare
		$SITE_ROOT/../gwman/scripts/run _rebuild_conf

		for d in stat_gw stat_node; do
			if [ -d "$SITE_ROOT/../stat/etc/conf/$d" ]; then
				find $SITE_ROOT/../stat/etc/conf/$d -type f -delete
			fi
		done
		$SITE_ROOT/../stat/scripts/run _rebuild_conf
		_update_listid
		_git_cmd commit

	fi

}

_sync_redis_conf() {
	_type=$1
	_redis="$redis -n 1"
	echo 'keys *:'$_type | $_redis | while read _k; do
		_user_id=$(echo $_k | cut -d':' -f1)
		echo "hkeys $_k" | $_redis | while read _id; do
			echo ${_type}.adminupdate $_id $_user_id
			bash $SITE_ROOT/scripts/mbr _call ${_type}.adminupdate $_id $_user_id
			sleep 1
		done

	done
}
_update_ssl() {

	if [ -f "/etc/letsencrypt/gateway_ssl.tar.gz" ]; then
		_f=/etc/letsencrypt/gateway_ssl.tar.gz
		md51=$(md5sum $_f | cut -d' ' -f1)
		if [ -f "$SITE_ROOT/public/deploy/ssl/gateway_ssl.tar.gz" ]; then
			_f=$SITE_ROOT/public/deploy/ssl/gateway_ssl.tar.gz
			md52=$(md5sum $_f | cut -d' ' -f1)
			if [ "$md51" != "$md52" ]; then
				mkdir -p $SITE_ROOT/public/deploy/ssl
				cp /etc/letsencrypt/gateway_ssl.tar.gz $SITE_ROOT/public/deploy/ssl
			fi
		fi

	fi

}

_update_tag() {
	PORTAL_DOMAIN=portal.$DOMAIN
	git="git -C $SITE_ROOT"
	_v=$($git config --get remote.origin.url | awk -F'/' '{print $NF}')
	tmp=$(mktemp)
	curl -sfkL http://$PORTAL_DOMAIN/deploy/info/version/$_v >$tmp
	if [ $? -ne 0 ]; then
		rm $tmp
		return 0
	fi

	_tag=$(cat $tmp)

	rm $tmp

	_my_tag=$($git describe --tags)
	_tag_update=0
	if [ "$_tag" != "$_my_tag" ]; then
		$git fetch --all --tags --prune
		$git checkout $_tag
		_tag_update=1
	fi

	return $_tag_update

}

_update() {
	echo "Update"
	_prepare
	_update_ssl
	_st_update=0

	_update_repos
	_st_update=$?

	_update_tag
	if [ $_st_update -eq 0 ]; then
		_st_update=$?
	fi

	_commit_repos

	return $_st_update
}

_monitor() {
	_update
	is_reload=$?
	if [ $is_reload -ne 0 ]; then
		$0 _reload
	fi

}

_run() {
	rm -rf $SITE_ROOT/tmp/* /tmp/updateconfig.lock
	_update
	chmod +x $SITE_ROOT/scripts/run
	$SITE_ROOT/start_server
}
$@
